<?php

/*
 * Exp:resso Store module for ExpressionEngine
 * Copyright (c) 2010-2014 Exp:resso (support@exp-resso.com)
 */

namespace Store\Action;

use Store\Exception\CartException;
use Store\FormValidation;
use Store\Model\Order;
use Store\Model\Transaction;

class CheckoutAction extends AbstractAction
{
    public static $form_errors;

    public function perform()
    {
        $this->ee->lang->loadfile('myaccount');
		
        // don't submit order when submitting add to cart form
        if (!empty($_POST['nosubmit'])) {
            unset($_POST['submit']);
        }

        if (isset($_POST['entry_id'])) {
            // simple add to cart form, add details to items array
            $_POST['items'] = array($_POST);
        }

        if ($this->ee->input->post('empty_cart')) {
            $this->ee->store->orders->clear_cart_cookie();

            // are there any items to add after emptying the cart?
            $add_items = false;
            if (isset($_POST['items'])) {
                foreach ($_POST['items'] as $item) {
                    if (isset($item['entry_id'])) {
                        $add_items = true;
                    }
                }
            }

            // only finish now if there are no new products to add to the cart
            if (!$add_items) {
                $return_url = $this->ee->store->store->create_url($this->ee->input->post('RET'));

                return ee()->functions->redirect($return_url);
            }
        }

        $form_params = $this->form_params();
        $update_data = $this->ee->security->xss_clean($_POST);
		
        $cart = ee()->store->orders->get_cart();
		
        // Some doublecheck to remove any html
        foreach ($update_data as $key => $val) {
            if (strpos($key, 'billing_') === false && strpos($key, 'shipping_') === false) continue;

            $val = html_entity_decode($val);
            $val = str_replace('[removed]', '', $val);
            $update_data[$key] = strip_tags($val);
        }

        try {
            $cart->fill($update_data, $form_params);
        } catch (CartException $e) {
            $this->ee->output->show_user_error(false, array("Store: ".$e->getMessage()));
        }
		// remember whether return_url in cart should be https
        if (isset($update_data['return_url'])) {
            $cart->return_url = $this->get_return_url();        
        }
        $cart->cancel_url = ee()->store->store->create_url();
	
        // validate form input
        $address_fields = array('name', 'first_name', 'last_name',
            'address1', 'address2', 'address3', 'city',
            'state', 'region', 'country', 'postcode', 'phone', 'company');

        /*foreach ($address_fields as $field) {
            // shorthand for requiring both billing and shipping fields
            if (isset($form_params['rules:'.$field])) {
                $rules = $form_params['rules:'.$field];
                $form_params['rules:billing_'.$field] = $rules;
                $form_params['rules:shipping_'.$field] = $rules;
                unset($form_params['rules:'.$field]);
            }

            // ignore shipping rules when shipping same as billing, and vice versa
            if ($cart->shipping_same_as_billing) {
                unset($form_params['rules:shipping_'.$field]);
            }
            if ($cart->billing_same_as_shipping) {
                unset($form_params['rules:billing_'.$field]);
            }
        }*/
		
		ee()->load->library('form_validation');
		
		
        //$this->ee->form_validation = new FormValidation;
        //$this->ee->form_validation->add_rules_from_params($form_params);
		$rules = array(
			array(
					'field' => 'payment_method',
					'label' => 'lang:store.payment_method',
					'rules' => 'valid_payment_method'				   
			),
			array(
					'field' => 'shipping_method',
					'label' => 'lang:store.shipping_method',
					'rules' => 'valid_shipping_method'				   
			),
		);
		
		foreach ($address_fields as $field) {
            // shorthand for requiring both billing and shipping fields
			
            if (isset($form_params['rules:'.$field])) {					
				
                $rules_add = $form_params['rules:'.$field];
                $form_params['rules:billing_'.$field] = $rules_add;
                $form_params['rules:shipping_'.$field] = $rules_add;
				if (!$cart->shipping_same_as_billing) {
					$rules[] = 
					array(
							'field' => 'shipping_'.$field,
							'label' => 'lang:store.shipping_'.$field,
							'rules' => 'required'				   
					);
									}
				if (!$cart->billing_same_as_shipping) {
					$rules[] = 
					array(
							'field' => 'billing_'.$field,
							'label' => 'lang:store.billing_'.$field,
							'rules' => 'required'				   
					);
				}
               
            }  			
        }
		
        // on final checkout step, payment_method is required
        if (isset($update_data['submit'])) {           
			$rules[] = array(
				'field' => 'payment_method',
				'label' => 'lang:store.payment_method',
				'rules' => 'required'	
			);
        }

        // accept terms checkbox
        if (isset($update_data['accept_terms'])) {         
		   $rules[] = array(
				'field' => 'payment_method',
				'label' => 'lang:store.payment_method',
				'rules' => 'required'	
			);
        }

        // validate email address       
		if (isset($update_data['order_email'])) {
     
			  $rules[] = array('field' => 'order_email',
							   'label' => 'lang:store.order_email',
							   'rules' => 'required');
		}
		
		// if registering member, ensure email does not already exist
        if ($cart->register_member) {           
			$rules[] = array(
				'field' => 'order_email',
				'label' => 'lang:store.order_email',
				'rules' => 'valid_user_email'	
			);
			$rules[] = array(
				'field' => 'username',
				'label' => 'lang:username',
				'rules' => 'valid_username'	
			);
			$rules[] = array(
				'field' => 'screen_name',
				'label' => 'lang:screen_name',
				'rules' => 'valid_screen_name'	
			);
			$rules[] = array(
				'field' => 'password',
				'label' => 'lang:password',
				'rules' => 'valid_password'	
			);
			$rules[] = array(
				'field' => 'password_confirm',
				'label' => 'lang:password',
				'rules' => 'matches[password]'	
			);
        }

            
        // validate promo code
        if (isset($update_data['promo_code'])) {
           
			$rules[] = array(
				'field' => 'promo_code',
				'label' => 'lang:store.promo_code',
				'rules' => 'valid_promo_code'	
			);
        }		
		
		ee()->form_validation->set_rules($rules);

        /**
         * store_checkout_form_validation hook
         * @since 2.4.5
         */
        if (ee()->extensions->active_hook('store_checkout_form_validation')) {
            ee()->extensions->call('store_checkout_form_validation', $this, $cart, $this->ee->form_validation);
            if (ee()->extensions->end_script) return;
        }

		//if(ee()->form_validation->run('', $cart->toTagArray()) == TRUE){	
		if(ee()->form_validation->run() == TRUE){		
            // update cart
            $cart->recalculate();
            ee()->store->orders->set_cart_cookie();

            // where to next?
            if (!$cart->isEmpty() && isset($_POST['submit'])) {
                // prevent duplicate payment form submissions
                $this->invalidate_csrf_token();
				if (config_item('store_force_member_login') AND
                    empty(ee()->session->userdata['member_id']) AND
                    !$cart->register_member)
					{
						// admin has set order submission to members only,
						// but customer is not logged in
						ee()->output->show_user_error(false, array(lang('store.submit_order_not_logged_in')));
					}

                // set submit cookie (triggers conversion tracking code on order summary page)
                ee()->input->set_cookie('store_cart_submit', $cart->order_hash, 0);
				
                if ($cart->is_order_paid) {				
                    // skip payment for free orders
                    $cart->markAsComplete();
                    return ee()->functions->redirect($cart->parsed_return_url);
                }
				// submit to payment gateway (this will either redirect to a third party site,
                // or the order's return or cancel url)
                $credit_card = ee()->input->post('payment');
                $transaction = ee()->store->payments->new_transaction($cart);
                //$transaction->amount = $cart->order_owing;
				$transaction->amount = $cart->order_total;
                $transaction->payment_method = $cart->payment_method;					
				ee()->store->payments->process_payment($cart, $transaction, $credit_card);
			} 
			elseif (!$cart->isEmpty() && isset($_POST['next']) && isset($_POST['next_url'])) {
                ee()->functions->redirect($this->get_return_url('next_url'));
            }
			
            // AJAX requests return JSON
            if (ee()->input->is_ajax_request()) {
                if (ee()->config->item('store_new_json_response') == 'yes') {
                    // New JSON Response
                    $this->returnJsonResponse($cart);
                }
                ee()->output->send_ajax_response($cart->toTagArray());
            }

            // default is to update totals and return
            if (empty($_POST['nosubmit'])) {
                $return_url = ee()->store->store->create_url(ee()->input->post('RET'));
            } else {
                $return_url = $this->get_return_url();
            }			
            ee()->functions->redirect($return_url);
        }
		       
		static::$form_errors = ee()->form_validation->_error_array;		
		
        if (ee()->input->is_ajax_request()) {
            // New JSON Response
            if (ee()->config->item('store_new_json_response') == 'yes') {
                $this->returnJsonResponse($cart);
            }

            ee()->output->send_ajax_response(array_merge($cart->toTagArray(), $form_errors));
        }

        if ($this->form_param('error_handling') != 'inline') {
            ee()->output->show_user_error(false, static::$form_errors);
        }

        return ee()->core->generate_page();
    }

    private function returnJsonResponse($cart)
    {
        $out = array();
        $out['cart'] = $cart->toTagArray();

        if (!empty(static::$form_errors)) {
            $out['form_errors'] = static::$form_errors;
        }

        ee()->output->send_ajax_response($out);
    }
}